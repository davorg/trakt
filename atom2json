#!/usr/bin/perl

use strict;
use warnings;
use 5.010;

use HTTP::Tiny;
use XML::LibXML;
use XML::LibXML::XPathContext;
use JSON;

my $url = 'https://trakt.tv/users/davorg/history.atom'
        . '?slurm=e94f879ae8bd21e4c6aca5a25228eeda';

my $response = HTTP::Tiny->new->get($url);
my $xml = $response->{content};

my $doc = XML::LibXML->load_xml(string => $xml)
  or die;
my $root = $doc->getDocumentElement;
my $xpc = XML::LibXML::XPathContext->new($root);

$xpc->registerNs('Atom', 'http://www.w3.org/2005/Atom');

my $data;

for ($xpc->findnodes('//Atom:entry')) {
  my $evt;
  $evt = parse_title($xpc->findvalue('./Atom:title', $_));

  push @$data, $evt;
}

say JSON->new->pretty->encode($data);

sub parse_title {
  my ($title) = @_;

  if ($title =~ /\(\d+\)$/) {
    return parse_film_title($title);
  } else {
    return parse_tv_title($title);
  }
}

sub parse_film_title {
  my ($title) = @_;

  my ($film, $year) = $title =~ /(.*)\s+\((\d+)\)$/;

  return { title => $film, year => $year};
}

sub parse_tv_title {
  my ($title) = @_;

  my ($show, $series, $episode, $ep_title)
    = $title =~ /(.*)\s+(\d+)x(\d+)\s+"(.*)"$/;

  return {
    show => $show,
    series => $series,
    episode => $episode,
    episode_title => $ep_title,
  };
}
